#OUTPUT('\nThis is my python file')



IMPORT sys

IMPORT csv

IMPORT glob

IMPORT os

IMPORT pandas as pd

IMPORT numpy as np

IMPORT seaborn as sb

IMPORT matplotlib

matplotlib.use('Agg')

IMPORT matplotlib.pyplot as plt

from matplotlib.ticker IMPORT MaxNLocator

from matplotlib.pyplot IMPORT step, show

from fpdf IMPORT FPDF

from datetime IMPORT datetime

IMPORT six





SET dir_path TO os.path.dirname(os.path.realpath(__file__))

SET file_name TO dir_path+"/csv_data/"+sys.argv[1]

SET host TO sys.argv[2]

SET base_color TO sb.color_palette()[0]

SET warning_message TO "initial"



DEFINE FUNCTION data_analysis():



   

    IF len(sys.argv) != 3:

        sys.stderr.write("Usage:./newAuto.sh filename.csv\n".format(sys.argv[0]))

        exit()





    TRY:

        SET df TO pd.read_csv(file_name)

    EXCEPT:

        sys.stderr.write("You Don't Have Any Open Port! No Data to analyze...".format(sys.argv[0]))

        sys.stderr.write("Thank you FOR using the service...")

        sys.exit(2)





   

    

    sb.set_style("darkgrid")

    SET df_of_open_ports TO df.loc[lambda df: df['STATE'] EQUALS "open"]

   

   

    # services visuals

    SET ax TO sb.countplot(x="SERVICE", data=df_of_open_ports,palette="Set2")

    ax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha="right")

    plt.tight_layout()

    ax.yaxis.get_major_locator().set_params(integer=True)

    ax.figure.savefig("/home/kali/Desktop/src/photos/service-result.png")





    # ports visuals

    SET ax TO sb.countplot(x="PORT", data=df_of_open_ports,palette="Set2")

    ax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha="right")

    plt.tight_layout()

    ax.yaxis.get_major_locator().set_params(integer=True)

    ax.figure.savefig("/home/kali/Desktop/src/photos/port-result.png")





    # state visuals

    SET ax TO sb.countplot(x="STATE", data=df,palette="Set2")

    ax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha="right")

    plt.tight_layout()

    ax.yaxis.get_major_locator().set_params(integer=True)

    ax.figure.savefig("/home/kali/Desktop/src/photos/state-result.png")

    



#Report generation

DEFINE FUNCTION reports():

    

    SET warning_message TO anomaly_detection()

    SET now TO datetime.now()

    SET timenow TO now.strftime("%d/%m/%Y")

    #images

    

    SET logo_img TO "/home/kali/Desktop/src/photos/logo.png"

    SET service_img TO "/home/kali/Desktop/src/photos/service-result.png"

    SET port_img TO "/home/kali/Desktop/src/photos/port-result.png"

    SET multi_img TO "/home/kali/Desktop/src/photos/multi-result.png"

    SET state_img TO "/home/kali/Desktop/src/photos/state-result.png"

    SET susb_data_img TO "/home/kali/Desktop/src/photos/susb_data.png"



    #messages

    SET report_message4 TO "Thank You FOR using the service..."

    SET report_message5 TO "Cyber security team."

    SET report_message6 TO "King Saud University - SEC 505 project"



    SET report_message7 TO "Current features include:"

    SET report_message8 TO "1. Collecting network data automatically"

    SET report_message9 TO "2. Analyzing the collected network data"

    SET report_message10 TO "3. Generate reports of the network status"

    SET new_feture1 TO "4. Detect new discovered ports"

    SET new_feture2 TO "5. Display warning message of the new detected ports"

    

    report_message1 ="Results of analyzing IP: " + host +" computer"

    SET report_message2 TO "You have the following services running:"

    SET report_message3 TO "You have some ports open! try to close unnecessarily ports:"

    SET state_message TO "The state of running ports is shown below:"







    SET pdf TO FPDF()

    #page1: Cover page

    pdf.add_page()

    pdf.set_font('Arial','B',22);

    pdf.set_text_color(173,216,230)



    SET pdf.cell(200, 10, txt TO report_message1,ln TO 1, align TO 'C')

    pdf.image(logo_img, w=pdf.w/2.0, h=pdf.h/4.0,x=50)

    SET pdf.cell(200, 10, txt TO report_message6,ln TO 4, align TO 'C')

    SET pdf.cell(200, 10, txt TO timenow,ln TO 4, align TO 'C')

        

    pdf.set_font('Arial','B',16);

    pdf.set_text_color(176,196,222)

    pdf.ln(25)

    SET pdf.cell(200, 10, txt TO report_message7,ln TO 4, align TO 'C')

    SET pdf.cell(200, 10, txt TO report_message8,ln TO 4, align TO 'C')

    SET pdf.cell(200, 10, txt TO report_message9,ln TO 4, align TO 'C')

    SET pdf.cell(200, 10, txt TO report_message10,ln TO 4, align TO 'C')

    SET pdf.cell(200, 10, txt TO new_feture1,ln TO 4, align TO 'C')

    SET pdf.cell(200, 10, txt TO new_feture2,ln TO 4, align TO 'C')







    #page2: graphs

    pdf.add_page()

    pdf.set_text_color(0,76,153)

    

    SET pdf.cell(200, 10, txt TO report_message2,ln TO 2, align TO 'C')

    pdf.image(service_img, w=pdf.w/2.0, h=pdf.h/4.0,x=50)

    pdf.ln(0.15)

    

    SET pdf.cell(200, 10, txt TO state_message,ln TO 3, align TO 'C')

    pdf.image(state_img, w=pdf.w/2.0, h=pdf.h/4.0, x=50)

    pdf.ln(0.15)

   

    SET pdf.cell(200, 10, txt TO report_message3,ln TO 3, align TO 'C')

    pdf.image(port_img, w=pdf.w/2.0, h=pdf.h/4.0, x=50)

    pdf.ln(0.15)



    #page 3: Conclude

    pdf.add_page()

    pdf.set_text_color(255,0,0)

    SET pdf.cell(200, 10, txt TO warning_message,ln TO 4, align TO 'C')

    TRY:

        pdf.image(susb_data_img, w=pdf.w/2.0, h=pdf.h/4.0, x=50)

    EXCEPT:

        PASS

    pdf.set_text_color(0,76,153)

    SET pdf.cell(200, 10, txt TO report_message4,ln TO 4, align TO 'C')

    SET pdf.cell(200, 10, txt TO report_message5,ln TO 4, align TO 'C')

   



    SET report_name TO "final_report_"+timenow+".pdf"

    pdf.output("/home/kali/Desktop/src/reports/final_report.pdf",'F')





DEFINE FUNCTION anomaly_detection():





    #change name of current to the one provided by shell/py?

    SET myFolder TO 'csv_data'

    SET files TO []

    SET results TO []

    SET susp_list TO []



#new scan

    SET current_file_name TO "csv_data/"+sys.argv[1]

    SET current_file TO pd.read_csv(current_file_name)

        



#results of comparasion

    SET results_file_name TO 'results.csv'



    IF not os.path.exists(myFolder):

        os.makedirs(myFolder)



#Multi csv files

    FOR file IN glob.glob('csv_data/*.csv'):

        IF file EQUALS current_file_name:

            continue;

        files.append(file)



        with open(os.path.join(os.getcwd(),file),mode='r') as myfile:

            TRY:

                SET df TO pd.read_csv(myfile)

            EXCEPT:

                continue;

            FOR port IN current_file['PORT']:

                IF port not IN df.values:

                    IF port not IN susp_list:

                        susp_list.append({'PORT': port})

            

    SET susp_df TO pd.DataFrame(susp_list, columns TO ['PORT'])





    FOR file IN glob.glob('csv_data/*.csv'):

        IF file EQUALS current_file_name:

            continue;

        files.append(file)



        with open(os.path.join(os.getcwd(),file),mode='r') as myfile:

            TRY:

                SET df TO pd.read_csv(myfile)

            EXCEPT:

                continue;

            FOR port IN susp_df['PORT']:

                IF port IN df.values:

                    SET susp_df TO susp_df[susp_df.PORT != port]



        

    SET susp_df TO susp_df.drop_duplicates()

    IF len(susp_df)>0:

        SET warning_message TO "\n WARNINIG: "+str(len(susp_df))+" NEW PORTS DETECTED!!"

SET #        fig,ax TO render_mpl_table2(susp_df, header_columns=0, col_width=0.25)

#        fig.savefig("/home/kali/Desktop/src/photos/susb_data.png")



    ELSE:

        SET warning_message TO 'NO NEW PORTS DETECTED.. '

    

    RETURN warning_message

 



DEFINE FUNCTION render_mpl_table2(data, col_width=3.0, row_height=3, font_size=14,

                     header_color='#40466e', row_colors=['#f1f1f2', 'w'], edge_color='w',

                     bbox=[0, 0, 1, 1], header_columns=0,

                     ax=None, **kwargs):

    IF ax is None:

        SET size TO (np.array(data.shape[::-1]) + np.array([0, 1])) * np.array([col_width, row_height])

        SET fig, ax TO plt.subplots(figsize=size)

        ax.axis('off')



    SET mpl_table TO ax.table(cellText=data.values, bbox=bbox, colLabels=data.columns, **kwargs)



    mpl_table.auto_set_font_size(False)

    mpl_table.set_fontsize(font_size)



    FOR k, cell IN six.iteritems(mpl_table._cells):

        cell.set_edgecolor(edge_color)

        IF k[0] EQUALS 0 or k[1] < header_columns:

            cell.set_text_props(weight='bold', color='w')

            cell.set_facecolor(header_color)

        ELSE:

            cell.set_facecolor(row_colors[k[0]%len(row_colors) ])

    RETURN ax.get_figure(), ax





#main



DEFINE FUNCTION main():

    data_analysis()

    reports()

#    anomaly_detection()

    exit()



IF __name__ EQUALS "__main__":

    main()

